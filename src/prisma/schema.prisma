generator client {
  provider = "prisma-client-js"
}

generator typedefs {
  provider = "prisma-generator-graphql-typedef"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid                    String               @id
  username                String
  owned_lobbies           Lobby[]              @relation("lobby_owner")
  joined_lobbies          Lobby[]              @relation("lobby_participant")
  lobby_recommendations   Recommendation[]     @relation("recommendation_author")
  skipped_recommendations SkipRecommendation[] @relation("lobby_skip_user")
  votes                   Vote[]
  created_at              DateTime             @default(now())
  updated_at              DateTime             @updatedAt
}

model Lobby {
  id                        Int                  @id @default(autoincrement())
  lobby_code                String
  state                     LobbyState           @default(WAITING_FOR_PLAYERS)
  owner                     User                 @relation("lobby_owner", fields: [owner_uuid], references: [uuid])
  owner_uuid                String
  participants              User[]               @relation("lobby_participant")
  votes                     Vote[]
  generated_recommendations Recommendation[]     @relation("generated_recommendations")
  custom_recommendations    Recommendation[]     @relation("custom_recommendations")
  skips                     SkipRecommendation[] @relation("lobby_skip")
  picks                     Recommendation[]     @relation("lobby_picks")
  created_at                DateTime             @default(now())
  updated_at                DateTime             @updatedAt
  latitude                  Float?
  longitude                 Float?
  postal_code               String?
}

model Recommendation {
  id                       String                 @id @default(uuid())
  name                     String
  category                 RecommendationCategory
  price_range_low          Float?
  price_range_high         Float?
  suggested_by             User?                  @relation("recommendation_author", fields: [suggested_by_uuid], references: [uuid])
  suggested_by_uuid        String?
  custom_lobby_relation    Lobby?                 @relation("custom_recommendations", fields: [custom_lobby_id], references: [id])
  custom_lobby_id          Int?
  votes                    Vote[]                 @relation("votes")
  lobbys_won               Lobby[]                @relation("lobby_picks")
  generated_lobby_relation Lobby[]                @relation("generated_recommendations")
  postal_code              String?
  latitude                 Float?
  longitude                Float?
  coords                   Unsupported("geometry(Point, 4326)")?

  // the index for that column
  @@index([coords], name: "recommendation_idx", type: Gist)
}

// When a user joins a lobby, they can choose to either propose a custom recommendation, or skip.
// This table will track when a user chooses to skip
model SkipRecommendation {
  lobby    Lobby  @relation("lobby_skip", fields: [lobby_id], references: [id])
  lobby_id Int
  user     User   @relation("lobby_skip_user", fields: [uuid], references: [uuid])
  uuid     String

  @@id(name: "id", [lobby_id, uuid])
}

model Vote {
  user              User           @relation(fields: [user_uuid], references: [uuid])
  user_uuid         String
  lobby             Lobby          @relation(fields: [lobby_id], references: [id])
  lobby_id          Int
  yes_vote          Boolean        @default(true)
  recommendation    Recommendation @relation("votes", fields: [recommendation_id], references: [id])
  recommendation_id String

  @@id(name: "id", [user_uuid, lobby_id, recommendation_id])
}

// ENUMS
enum LobbyState {
  WAITING_FOR_PLAYERS
  READY_TO_START
  VOTING
  RESULTS
  DONE
}

enum RecommendationCategory {
  DINING
  ACTIVITY
  EVENT
  CUSTOM
}
